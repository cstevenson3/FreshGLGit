# version 450 core

in vec2 pass_textureUV;
in vec3 pass_position;
in vec3 pass_normal;
in vec3 pass_tangent;

in vec4 shadowCoord;
//in vec3 lightVector;
//in vec3 cameraVector;

in vec3 tangentLightPosition;
in vec3 tangentCameraPosition;
in vec3 tangentFragmentPosition;
in vec3 tangentNormalVector;

uniform sampler2D diffuseTexture;
uniform sampler2D depthTexture;
uniform sampler2D normalMap;

void main(void){

	//params
	float ambience=0.1; //light intensity in shadow/unlit
	float reflectivity=0.5; //allocation of light to specularity (0-1)
	float damp=1; //doesn't do anything now
	
	int celShadeValue = 10; //lower = fewer variations (disabled)
	
	//normal map
	
	vec3 normalMapValue = texture(normalMap, pass_textureUV).rgb;
	normalMapValue = normalize(normalMapValue * 2.0 - 1.0);
	vec3 lightVector = normalize(tangentLightPosition - tangentFragmentPosition);
	vec3 cameraVector = normalize(tangentCameraPosition - tangentFragmentPosition);
	
	//diffuse
	vec3 normalizedLightVector = normalize(lightVector);
	vec3 normalizedFaceNormal = normalize(normalMapValue);
	//vec3 normalizedFaceNormal = normalize(tangentNormalVector);
	float dotNormalLight = dot(normalizedLightVector,normalizedFaceNormal);
	float diffuseBrightness = clamp(dotNormalLight,0.0,1.0);
	
	//occlusion
	vec3 lightCoords = shadowCoord.xyz /shadowCoord.w;
	lightCoords = lightCoords * 0.5 + 0.5;
	float closestDepth = texture(depthTexture,lightCoords.xy).r;
	float currentDepth = lightCoords.z;
	
	float totalBrightness=0;
	
	float shadowOffset = 0.00007*tan(acos(dotNormalLight));
	//shadowOffset = clamp(shadowOffset, 0.0,0.01);
	if(closestDepth+shadowOffset<currentDepth){
		totalBrightness=ambience;
	}else{
	
	//specular
	vec3 reflectedLightVector = reflect(-1*normalizedLightVector,normalizedFaceNormal);
	vec3 normalizedCameraVector = normalize(cameraVector);
	float specularDot = dot(reflectedLightVector,normalizedCameraVector);
	specularDot = clamp(specularDot,0.0,1.0);
	float specularBrightness = specularDot;
	
	totalBrightness=ambience+(1-reflectivity)*(1-ambience)*diffuseBrightness+(reflectivity)*(1-ambience)*specularBrightness;
	//totalBrightness=1;
	}
	//vec4 colorValue = celShadeValue * vec4(totalBrightness*texture(diffuseTexture,pass_textureUV).xyz,1.0);
	//gl_FragColor= vec4(floor(colorValue.r),floor(colorValue.g),floor(colorValue.b),colorValue.a) / celShadeValue;
	gl_FragColor=vec4(totalBrightness*texture(diffuseTexture,pass_textureUV).xyz,1.0);
	//gl_FragColor=vec4(texture(normalMap,pass_textureUV).xyz,1.0);
	//gl_FragColor=vec4(1.0,0.0,0.0,1.0);
}