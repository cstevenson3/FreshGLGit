# version 450 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 textureUV;
layout (location = 2) in vec3 normal;
layout (location = 3) in vec3 tangent;

out vec2 pass_textureUV;
out vec3 pass_position;
out vec3 pass_normal;
out vec3 pass_tangent;
out vec4 shadowCoord;
out vec3 lightVector;
out vec3 cameraVector;

out vec3 tangentLightPosition;
out vec3 tangentCameraPosition;
out vec3 tangentFragmentPosition;
out vec3 tangentNormalVector;

uniform vec3 lightPosition;
uniform vec3 cameraPosition;

uniform mat4 modelTransformationMatrix;
uniform mat4 cameraProjectionMatrix;
uniform mat4 cameraViewMatrix;

uniform mat4 lightProjectionMatrix;
uniform mat4 lightViewMatrix;
uniform mat4 lightBiasMatrix;

void main(void){

	vec3 T = normalize(vec3(modelTransformationMatrix * vec4(tangent,0.0)));
	vec3 B = normalize(vec3(modelTransformationMatrix * vec4(cross(normal,tangent),0.0)));
	vec3 N = normalize(vec3(modelTransformationMatrix * vec4(normal,0.0)));
	mat3 TBN = transpose(mat3(T, B, N));

	tangentLightPosition = TBN * lightPosition;
	tangentCameraPosition = TBN * cameraPosition;
	tangentFragmentPosition = TBN * vec3(modelTransformationMatrix * vec4(position,1.0));
	tangentNormalVector = TBN * normal;

	gl_Position = cameraProjectionMatrix * cameraViewMatrix * modelTransformationMatrix * vec4(position,1.0);
	//gl_Position = vec4(position.x-round(position.x),position.y-round(position.y),-0.5,1.0);
	//gl_Position = vec4(0.0,0.0,-0.5,1.0);
	pass_textureUV = textureUV;
	pass_position = (cameraProjectionMatrix * cameraViewMatrix * modelTransformationMatrix * vec4(position,1.0)).xyz;
	pass_normal = (modelTransformationMatrix * vec4(normal,0.0)).xyz;
	shadowCoord = lightProjectionMatrix * lightViewMatrix * modelTransformationMatrix * vec4(position,1.0);
	lightVector = lightPosition - (modelTransformationMatrix * vec4(position,1.0)).xyz;
	cameraVector = cameraPosition - (modelTransformationMatrix * vec4(position,1.0)).xyz;
	pass_tangent=tangent;
}